#!/bin/sh

# See LICENSE file for copyright and license details.


usage () {
cat <<EOF
usage: $0 [OPTION]... [VAR=VALUE]... [BOARD]

Configure the build environment for FE310 firmware development.

Configuration:
  --program=NAME          set output file base name [firmware]
  --stack-size=SIZE       set initial stack size in bytes [1024]
  --timer-tick=CYCLES     set timer interrupt interval in cycles [320000]

Directories:
  --incdir=DIR            directory for user-provided headers [inc]
  --objdir=DIR            directory for object files [obj]
  --outdir=DIR            directory for final output files [out]
  --srcdir=DIR            directory for source files [src]

Optional features:
  --disable-bootconfig    skip flash, serial, and clock configuration at startup [enabled]
  --disable-brickguard    disable anti-brick LED check at startup [enabled]
  --disable-warnings      suppress compiler warnings [enabled]
  --enable-debug          include debug symbols [disabled]
  --enable-optimize=...   set optimization: auto, debug, none, size, speed [auto]

Boards:
  hifive1                 SiFive HiFive1 (fe310-g000)
  hifive1-revb            SiFive HiFive1 Rev B (fe310-g002)

Environment variables:
  CC                      C compiler binary [detected]
  GDB                     GDB binary [auto]
  OBJCOPY                 binary for copying object files [auto]
  OBJDUMP                 binary for dumping object files [auto]
  SIZE                    binary for displaying object size [auto]
  QEMU                    QEMU binary [qemu-system-riscv32]

  CROSS_COMPILE           toolchain prefix [riscv32-unknown-elf-]

  ASFLAGS                 assembler flags
  CFLAGS                  C compiler flags
  LDFLAGS                 linker flags
  LDLIBS                  linker libraries
  LIBCC                   compiler runtime library [detected]
EOF
exit 0
}

quote () {
tr '\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo "$1" ; return 0 ; }
$1
EOF
printf %s\\n "$1" | sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" -e "s#^'\([-[:alnum:]_,./:]*\)=\(.*\)\$#\1='\2#"
}
echo () { printf "%s\n" "$*" ; }
fail () { echo "$*" ; exit 1 ; }
fnmatch () { eval "case \"\$2\" in $1) return 0 ;; *) return 1 ;; esac" ; }
cmdexists () { command -v "$1" >/dev/null 2>&1; }
trycc () { test -z "$CC" && cmdexists "$1" && CC=$1 ; }

isnumber () {
case "$1" in
'') return 1 ;;
0[xX][0-9A-Fa-f]*)
case "${1#0[xX]}" in
''|*[!0-9A-Fa-f]*) return 1 ;;
*) return 0 ;; esac ;;
*[!0-9]*) return 1 ;;
*) return 0 ;;
esac
}

stripdir () {
while eval "fnmatch '*/' \"\${$1}\"" ; do eval "$1=\${$1%/}" ; done
}

tryflag () {
printf "checking whether compiler accepts %s... " "$2"
echo "typedef int x;" > "$tmpc"
if $CC $CFLAGS_TRY $2 -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
eval "$1=\"\${$1} \$2\""
eval "$1=\${$1# }"
return 0
else
printf "no\n"
return 1
fi
}

tryldflag () {
printf "checking whether linker accepts %s... " "$2"
echo "typedef int x;" > "$tmpc"
if $CC $LDFLAGS_TRY -nostdlib "$2" -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
eval "$1=\"\${$1} \$2\""
eval "$1=\${$1# }"
return 0
else
printf "no\n"
return 1
fi
}


ASFLAGS_AUTO=
CFLAGS_AUTO=
CFLAGS_TRY=
CROSS_COMPILE=riscv32-unknown-elf-
GDB=${CROSS_COMPILE}gdb
LDFLAGS_AUTO=
LDFLAGS_TRY=
LDLIBS_AUTO=
OBJCOPY=
OBJDUMP=
QEMU=qemu-system-riscv32
SIZE=
board=
bootconfig=yes
brickguard=yes
debug=no
incdir=inc
objdir=obj
optimize=auto
outdir=out
program=firmware
qemu_machine=sifive_e
srcdir=src
stack_size=1024
timer_tick=320000
warnings=yes


for arg ; do
case "$arg" in
--help|-h) usage ;;
--program=*) program=${arg#*=} ;;
--stack-size=*) stack_size=${arg#*=} ;;
--timer-tick=*) timer_tick=${arg#*=} ;;
--incdir=*) incdir=${arg#*=} ;;
--objdir=*) objdir=${arg#*=} ;;
--outdir=*) outdir=${arg#*=} ;;
--srcdir=*) srcdir=${arg#*=} ;;
--enable-optimize) optimize=auto ;;
--enable-optimize=*) optimize=${arg#*=} ;;
--disable-optimize) optimize=no ;;
--enable-debug|--enable-debug=yes) debug=yes ;;
--disable-debug|--enable-debug=no) debug=no ;;
--enable-warnings|--enable-warnings=yes) warnings=yes ;;
--disable-warnings|--enable-warnings=no) warnings=no ;;
--enable-bootconfig|--enable-bootconfig=yes) bootconfig=yes ;;
--disable-bootconfig|--enable-bootconfig=no) bootconfig=no ;;
--enable-brickguard|--enable-brickguard=yes) brickguard=yes ;;
--disable-brickguard|--enable-brickguard=no) brickguard=no ;;
-*) fail "$0: unknown option $arg" ;;
ASFLAGS=*) ASFLAGS=${arg#*=} ;;
CC=*) CC=${arg#*=} ;;
CFLAGS=*) CFLAGS=${arg#*=} ;;
CROSS_COMPILE=*) CROSS_COMPILE=${arg#*=} ;;
GDB=*) GDB=${arg#*=} ;;
LDFLAGS=*) LDFLAGS=${arg#*=} ;;
LDLIBS=*) LDLIBS=${arg#*=} ;;
LIBCC=*) LIBCC=${arg#*=} ;;
OBJCOPY=*) OBJCOPY=${arg#*=} ;;
OBJDUMP=*) OBJDUMP=${arg#*=} ;;
QEMU=*) QEMU=${arg#*=} ;;
SIZE=*) SIZE=${arg#*=} ;;
*=*) ;;
*) board=$arg ;;
esac
done


if ! fnmatch 'hifive1|hifive1-revb' "$board" ; then
fail 'error: board must be "hifive1" or "hifive1-revb"'
fi

isnumber "$stack_size" || \
fail "error: invalid value '$stack_size' for --stack-size (must be a non-negative integer)"
isnumber "$timer_tick" || \
fail "error: invalid value '$timer_tick' for --timer-tick (must be a non-negative integer)"

for i in incdir objdir outdir srcdir ; do
stripdir $i
done

basedir="${0%/configure}"
stripdir basedir
abs_builddir="$(pwd)" || fail "$0: cannot determine working directory"
abs_basedir="$(cd "$basedir" && pwd)" || fail "$0: invalid source directory $basedir"
test "$abs_basedir" != "$abs_builddir" && \
fail "error: please run './configure' from the root of the source tree"

mkdir -p "$incdir" "$objdir" "$outdir" "$srcdir"

i=0
set -C
while : ; do i=$(($i+1))
tmpc="./conf$$-$PPID-$i.c"
2>|/dev/null > "$tmpc" && break
test "$i" -gt 50 && fail "$0: cannot create temporary file $tmpc"
done
set +C
trap 'rm "$tmpc"' EXIT INT QUIT TERM HUP

printf "checking for C compiler... "
trycc ${CROSS_COMPILE}gcc
trycc ${CROSS_COMPILE}clang
printf "%s\n" "$CC"
test -n "$CC" || { echo "$0: cannot find a C compiler" ; exit 1 ; }

printf "checking whether C compiler works... "
echo "typedef int x;" > "$tmpc"
if output=$($CC $CFLAGS -c -o /dev/null "$tmpc" 2>&1) ; then
printf "yes\n"
else
printf "no; compiler output follows:\n%s\n" "$output"
exit 1
fi

printf "checking target system type... "
target=$($CC -dumpmachine 2>/dev/null)
printf "%s\n" "$target"
if ! fnmatch 'riscv*' "$target" ; then
fail "error: compiler does not target riscv"
fi

printf "checking for C compiler family... "
cc_ver="$(LC_ALL=C $CC -v 2>&1)"
cc_family=unknown
if fnmatch '*gcc\ version*' "$cc_ver" ; then
cc_family=gcc
elif fnmatch '*clang\ version*' "$cc_ver" ; then
cc_family=clang
fi
echo "$cc_family"

tc_prefix=$CROSS_COMPILE
test "$cc_family" = clang && tc_prefix=llvm-
: ${OBJCOPY:=${tc_prefix}objcopy}
: ${OBJDUMP:=${tc_prefix}objdump}
: ${SIZE:=${tc_prefix}size}

printf "checking for objcopy... %s\n" "$OBJCOPY"
if ! cmdexists "$OBJCOPY"; then
fail "error: objcopy '$OBJCOPY' not found"
fi

printf "checking for objdump... %s\n" "$OBJDUMP"
if ! cmdexists "$OBJDUMP"; then
fail "error: objdump '$OBJDUMP' not found"
fi

printf "checking for size... %s\n" "$SIZE"
if ! cmdexists "$SIZE"; then
fail "error: size '$SIZE' not found"
fi

tryflag CFLAGS_TRY -Werror=unknown-warning-option
tryflag CFLAGS_TRY -Werror=unused-command-line-argument
tryflag CFLAGS_TRY -Werror=ignored-optimization-argument

tryldflag LDFLAGS_TRY -Werror=unknown-warning-option
tryldflag LDFLAGS_TRY -Werror=unused-command-line-argument

if ! fnmatch '-std=*|*\ -std=*' "$CFLAGS_AUTO $CFLAGS" ; then
tryflag CFLAGS_AUTO -std=c99
fi

tryflag CFLAGS_AUTO -mabi=ilp32 || \
fail "error: compiler doesn't support the ILP32 ABI"
tryflag CFLAGS_AUTO -march=rv32imac_zicsr_zifencei || \
fail "error: compiler doesn't support the RV32IMAC_ZICSR_ZIFENCEI architecture"
tryflag CFLAGS_AUTO -mcpu=sifive-e31
tryflag CFLAGS_AUTO -mtune=sifive-e31
tryflag CFLAGS_AUTO -mcmodel=medlow

test "$debug" = yes && CFLAGS_AUTO="$CFLAGS_AUTO -g"

printf "checking for optimization settings... "
case "x$optimize" in
xauto)
if fnmatch '-O*|*\ -O*' "$CFLAGS_AUTO $CFLAGS" ; then
printf "using provided CFLAGS\n"
else
printf "default\n" ; tryflag CFLAGS_AUTO -Os
fi
;;
xdebug) printf "debug\n" ; tryflag CFLAGS_AUTO -Og ;;
xsize) printf "size\n" ; tryflag CFLAGS_AUTO -Os ;;
xspeed) printf "speed\n" ; tryflag CFLAGS_AUTO -O3 ;;
xno|xnone|x) printf "disabled\n" ;;
*) printf "custom\n" ;;
esac

tryflag CFLAGS_AUTO -pipe

if fnmatch '-g*|*\ -g*' "$CFLAGS_AUTO $CFLAGS" ; then :
else
tryflag CFLAGS_AUTO -fomit-frame-pointer
fi

tryflag CFLAGS_AUTO -fno-unwind-tables
tryflag CFLAGS_AUTO -fno-asynchronous-unwind-tables
tryflag CFLAGS_AUTO -ffunction-sections
tryflag CFLAGS_AUTO -fdata-sections

test "$cc_family" = clang && tryflag CFLAGS_AUTO -w

tryflag CFLAGS_AUTO -Wno-pointer-to-int-cast
tryflag CFLAGS_AUTO -Werror=implicit-function-declaration
tryflag CFLAGS_AUTO -Werror=implicit-int
tryflag CFLAGS_AUTO -Werror=pointer-sign
tryflag CFLAGS_AUTO -Werror=pointer-arith
tryflag CFLAGS_AUTO -Werror=int-conversion
tryflag CFLAGS_AUTO -Werror=incompatible-pointer-types
tryflag CFLAGS_AUTO -Werror=discarded-qualifiers
tryflag CFLAGS_AUTO -Werror=discarded-array-qualifiers

test "$cc_family" = clang && tryflag CFLAGS_AUTO -Qunused-arguments

if test "x$warnings" = xyes ; then
tryflag CFLAGS_AUTO -Waddress
tryflag CFLAGS_AUTO -Warray-bounds
tryflag CFLAGS_AUTO -Wchar-subscripts
tryflag CFLAGS_AUTO -Wduplicate-decl-specifier
tryflag CFLAGS_AUTO -Winit-self
tryflag CFLAGS_AUTO -Wreturn-type
tryflag CFLAGS_AUTO -Wsequence-point
tryflag CFLAGS_AUTO -Wstrict-aliasing
tryflag CFLAGS_AUTO -Wunused-function
tryflag CFLAGS_AUTO -Wunused-label
tryflag CFLAGS_AUTO -Wunused-variable
fi

LDFLAGS_AUTO="$LDFLAGS_AUTO -nostdlib"
tryldflag LDFLAGS_AUTO -Wl,--sort-section,alignment
tryldflag LDFLAGS_AUTO -Wl,--sort-common
tryldflag LDFLAGS_AUTO -Wl,--gc-sections
tryldflag LDFLAGS_AUTO -Wl,--no-undefined
tryldflag LDFLAGS_AUTO -Wl,--defsym=__stack_size=$stack_size || \
fail "error: cannot set __stack_size symbol"
if test "$board" = hifive1 ; then
tryldflag LDFLAGS_AUTO -Wl,--defsym=__rom_size=0x20000000 || \
fail "error: cannot set __rom_size symbol"
fi
tryldflag LDFLAGS_AUTO -Tbsp/fe310.ld || \
fail "error: missing/invalid linker script 'bsp/fe310.ld'"
LDFLAGS_AUTO="$LDFLAGS_AUTO -Wl,-Map,"$outdir"/"$program".map"

tryflag ASFLAGS_AUTO -DTIMER_TICK=$timer_tick
test "x$bootconfig" = xno && ASFLAGS_AUTO="$ASFLAGS_AUTO -DWITHOUT_BOOTCFG"
test "x$brickguard" = xno && ASFLAGS_AUTO="$ASFLAGS_AUTO -DWITHOUT_BOOTGRD"

if test "$cc_family" = clang ; then
test -z "$LIBCC" && tryldflag LIBCC -lcompiler_rt
fi
test -z "$LIBCC" && tryldflag LIBCC -lgcc && tryldflag LIBCC -lgcc_eh
test -z "$LIBCC" && try_libcc=`$CC -print-libgcc-file-name 2>/dev/null` \
&& tryldflag LIBCC "$try_libcc"
test -z "$LIBCC" && fail "error: unable to detect compiler runtime library"

LDLIBS_AUTO="-Wl,--start-group -lc_nano -lm_nano -lgloss_nano -Wl,--end-group"

test "$board" != hifive1 && qemu_machine="$qemu_machine,revb=true"

printf "creating config.mk... "

cmdline=$(quote "$0")
for i ; do cmdline="$cmdline $(quote "$i")" ; done

exec 3>&1 1>config.mk

cat << EOF
# This version of config.mk was generated by:
# $cmdline
# Any changes made to this file will be lost if configure is re-run

PROGRAM ?= $program

INC_DIR := $incdir
OBJ_DIR := $objdir
OUT_DIR := $outdir
SRC_DIR := $srcdir
SYS_DIR := sys

SRCS := \$(SYS_DIR) \$(SRC_DIR)

ELF := \$(OUT_DIR)/\$(PROGRAM).elf
HEX := \$(OUT_DIR)/\$(PROGRAM).hex
LST := \$(OUT_DIR)/\$(PROGRAM).lst

CC = $CC
GDB = $GDB
OBJCOPY = $OBJCOPY
OBJDUMP = $OBJDUMP
QEMU = $QEMU
SIZE = $SIZE

ASFLAGS = $ASFLAGS_AUTO $ASFLAGS
CFLAGS = $CFLAGS_AUTO $CFLAGS
LDFLAGS = $LDFLAGS_AUTO $LDFLAGS
LDLIBS = $LDLIBS_AUTO $LDLIBS
LIBCC = $LIBCC

QEMU_MACHINE = $qemu_machine
OBJDUMP_OPT = --source --all-headers --demangle --line-numbers --wide
EOF
exec 1>&3 3>&-

printf "done\n"
